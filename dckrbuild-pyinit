#!/usr/bin/env python3
# vim: sts=4 sw=4 et

import argparse
import os
import sys
import yaml

parser = argparse.ArgumentParser(description="Init docker image")
parser.add_argument("dist", type=str, default='ubuntu20.04', help="Base distrubtion")
parser.add_argument("-p", "--prefix", type=str, default='build', help="Target image prefix")
parser.add_argument("-k", "--key", type=str, action='append', default=[], help="List of keys")
parser.add_argument("-r", "--repo", type=str, action='append', default=[], help="List of repositories")
parser.add_argument("-c", "--config", type=str, help="Configuration file")

args = parser.parse_args()
if args.config:
    cfg = yaml.safe_load(open(args.config))
    if args.prefix == 'build':
        args.prefix = cfg.get('prefix', args.prefix)
    args.key += cfg.get('key', [])
    args.repo += cfg.get('repo', [])

CODENAME = {
    'ubuntu24.04': 'noble',
    'ubuntu22.04': 'jammy',
    'ubuntu20.04': 'focal',
    'ubuntu18.04': 'bionic',
    'debian12': 'bookworm',
    'debian11': 'bullseye',
    'debian10': 'buster',
}
DISTS = {}
DISTS.update([(k, k) for k,v in CODENAME.items()])
DISTS.update([(v, k) for k,v in CODENAME.items()])

def dist2image(d):
    d = DISTS.get(d, d)
    if d.startswith('debian'):
        return 'debian:' + d[len('debian'):]
    elif d.startswith('ubuntu'):
        return 'ubuntu:' + d[len('ubuntu'):]
    return d

dist = DISTS[args.dist]
image = dist2image(dist)
codename = CODENAME[dist]

fp = open('Dockerfile.init', 'w')
fp.write(f'''
FROM {image}

ENV DEBIAN_FRONTEND=noninteractive

RUN echo 'Acquire::http::Proxy "http://::1:3142";' > /etc/apt/apt.conf.d/01-proxy
''')

with open('local.list', 'w') as lfp:
    for r in args.repo:
        lfp.write(r.format(dist=dist, codename=codename) + '\n')
fp.write('COPY local.list /etc/apt/sources.list.d/local.list\n')

for k in args.key:
    fp.write(f'COPY {k} /etc/apt/trusted.gpg.d/{k}\n')

fp.write('''
RUN apt update
RUN apt install --yes --no-install-recommends build-essential fakeroot ccache
''')
fp.close()

os.execvp('docker', f'docker build --network host --tag {args.prefix}:{dist} --file Dockerfile.init .'.split())
